---
meta:
  name: tlc
  description: Traffic Light Controllers
  version: 1.3.0
objects:
  Traffic Light Controller:
    description:
    aggregated_status:
      1:
        title: Local mode
        description: Traffic Light Controller is in local mode. NTS has no control.
      2:
        title: No Communications
        description: Not used
      3:
        title: High Priority Fault
        description: Traffic Light Controller is in fail safe mode; e.g. yellow flash
          or dark mode
      4:
        title: Medium Priority Fault
        description: |-
          Traffic Light Controller has a medium priority fault, but not in fail safe mode.
          E.g. several lamp faults or detector fault
      5:
        title: Low Priority Fault
        description: Traffic Light Controller has a low priority fault. E.g. Detector
          fault
      6:
        title: Connected - In Use
        description: Traffic Light Controller is not in dark mode or in yellow flash
      7:
        title: Connected - Idle
        description: Traffic Light Controller is in dark mode or in yellow flash
      8:
        title: Not Connected
        description: Not used
    functional_position: null
    functional_state: null
    alarms:
      A0001:
        description: |-
          Serious hardware error.
          Is a "major fault" defined according to 3.8 i EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.0.0
      A0002:
        description: |-
          Less serious hardware error.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
      A0003:
        description: |-
          Serious configuration error.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.0.0
      A0004:
        description: |-
          Less serious configuration error.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
      A0005:
        description: |-
          Synchronisation error (coordination).
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
      A0006:
        description: |-
          Safety error
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.0.0
      A0007:
        description: |-
          Communication error.
          Used for communication errors with the central system. Includes NTP connection loss if the TLC is configured to use NTP.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
        arguments:
          protocol:
            type: string
            description: Type of communication error, e.g. NTP or RSMP
            values:
              rsmp: RSMP
              ntp: NTP
      A0009:
        description: |-
          Other error.
          Used for other errors not covered by any other alarm type.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
      A0010:
        description: |-
          Door open.
          Used for open door (room or cabinet).
        priority: 3
        category: D
        from_version: 1.0.15
    statuses:
      S0001:
        description: |-
          Signal group status.
          Provides the status of each signal group, e.g. green, yellow, red,
          or other states used in the signal program.
          See the section on signal group states for more information about
          the possible states.

          Can be used to draw a live signal group diagram as well as to provide
          diagnostic information about the performance of the controller.

          The base cycle counter is based on just the internal clock and the
          cycle length. Controllers with synchronized clocks and the same cycle
          length will therefore have identical base cycle counters.

          The cycle clock is based on the base cycle counter, but shifts the
          phase using the offset set in the controller:

          c = (b + o) modulo t

          where:
          c = cycle counter
          b = base cycle counter
          o = offset
          t = cycle length

          See the coordination section for more information about cycle
          counters.

          The millisecond attributes updates only when the
          signal group state changes, meaning it's safe to subscribe to it
          using **sendOnChange** - you will not be flooded with state updates
          every millisecond.
        from_version: 1.0.0
        arguments:
          signalgroupstatus:
            type: string
            description: |-
              Signal group status as text field.
              Each character represents the state of the signal group in consecutive order,
              where the leftmost character starts with signal group 1.
              Signal group status is described in detail in the corresponding section.
              A dash "-" is used for undefined/non-exiting signal groups.
            pattern: "^[a-hA-G0-9N-P]*$"
          basecyclecounter:
            type: integer_as_string
            description: |-
              Base cycle counter.
              Updates once per second, counting from 0 and wrapping around at the cycle.
            min: 0
            max: 999
          cyclecounter:
            type: integer_as_string
            description: |-
              Cycle counter.
              Updates once per second, counting from 0 and wrapping around at the cycle.
            min: 0
            max: 999
          millisecond:
            type: integer_as_string
            min: 0
            max: 999999
            description: | -
              Updates only when the signal group status changes, providing the precise
              cycle counter in milliseconds of when the state changed.
          stage:
            type: integer_as_string
            description: Current stage (isolated)
            min: 0
            max: 999
      S0002:
        description: |-
          Detector logic status.
          Provides the status of all detector logics of the controller.
          Can be used to draw a live signal group diagram as well provide diagnostic information about the performance of the controller. Can also be used for bus priority, external control systems, and much more.
        from_version: 1.0.2
        arguments:
          detectorlogicstatus:
            type: string_list_as_string
            description: |-
              Detector logic status as text field.
              Each character represent the state of the detector logic in consecutive order,
              where the leftmost character starts with detector logic 1.
              0 : Detector logic is not active
              1 : Detector logic is active
              - : Detector logic is undefined/does not exist
      S0003:
        description: |-
          Input status.
          Input (1-255) of the controllers general purpose I/O.
          Input is used where the traffic light controller must react to external control. It could be external detectors, bus priority, and much more.
        from_version: 1.0.2
        arguments:
          inputstatus:
            type: string_list_as_string
            description: |-
              Input status as text field.
              Each character represent the state of the input in consecutive order,
              where the leftmost character starts with input 1.
              0 : Input is not active
              1 : Input is active
              - : Input is undefined/does not exist
      S0004:
        description: |-
          Output status.
          Output (1-255) of the controllers general purpose I/O.
          Can be used for all types of output where the traffic light controller needs to control other equipment. Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        from_version: 1.0.2
        arguments:
          outputstatus:
            type: string
            description: |-
              Output status as text field.
              Each character represent the state of the output status in consecutive order,
              where the leftmost character starts with output 1.
              0 : Output is not active
              1 : Output is active
              - : Output is undefined/does not exist
      S0005:
        description: |-
          Traffic Light Controller starting.
          The traffic signal is starting, e.g. it is in startup mode and has not begun working normally yet.
          During startup mode the traffic controller shows dark, red, yellow flash or using the predetermined start cycle (minimum times).
        from_version: 1.0.2
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Controller is not in start up mode
              True: Controller is currently in start up mode
          statusByIntersection:
            description: |-
              False: Intersection is not in start up mode
              True: Intersection is currently in start up mode
            type: array
            items:
              intersection:
                type: integer_as_string
                description: Intersection id
                min: 0
                max: 255
              startup:
                type: boolean_as_string
                description: Start up mode
      S0006:
        description: |-
          Emergency route.
          The status is active during emergency prioritization.
          Used in situations where full priority is given in the emergency vehicle program
          or for other types of priority in some cases.

          If no emergency route is active, status should be set to False, and emergencystage to zero.

          Deprecated, use S0035 instead.
        from_version: 1.0.2
        arguments:
          status:
            type: boolean_as_string
            deprecated: true
            description: |-
              False: Emergency route inactive
              True: Emergency route active
          emergencystage:
            type: integer_as_string
            deprecated: true
            description: Number of emergency route (set to zero if no route is active)
            min: 0
            max: 255
      S0007:
        description: |-
          Controller switched on.
          The controller is active and is not in dark mode.
          Used to determine if the there is output to the signal heads, e.g. it shows red, green or yellow to the vehicles.
          During maintenance work the controller might be using dark mode (no output to the signal heads).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: Traffic Light Controller in dark mode
              True: Traffic Light Controller not in dark mode
          source:
            description: Source of the status change
            type: string_list_as_string
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0008:
        description: |-
          Manual control.
          Traffic control deactivated in controller.
          Signal timings is controlled manually by service personnel using the operating panel of the controller.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: Manual control inactive
              True: Manual control active
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0009:
        description: |-
          Fixed time control.
          Traffic actuated control deactivated and a pre-timed control is used.
          Usually only used in case normal detectors can't be used, e.g. during maintenance work.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: Fixed time control inactive
              True: Fixed time control active
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0010:
        description: |-
          Isolated control.
          Isolated control mode indicates that the controller operates independently of any other traffic light controller. This may be different depending on traffic program (time plan).
          Used to determine if the controller is operating independently or operating with other controllers (coordination).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "0" and "True" (one intersection) or "1,2" and "True,False" (two intersections).
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: Isolated control disabled
              True: Isolated control enabled (Vehicle actuated control or Fixed time control)
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0011:
        description: |-
          Yellow flash.
          The controller shows yellow flash.
          Yellow flash may be used during a serious fault (depending on configuration) or maintenance work. It can also be manually set using M0001.
          Some countries may use yellow flash as an normal operating mode, and not necessarily during fault.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "True,False"
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: Yellow flash disabled
              True: Yellow flash enabled
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0012:
        description: |-
          All red.
          The controller show all red.
          All red can be manually set using the controllers operating panel during maintenance work.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "True,False"
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: boolean_as_string_list
            description: |-
              False: All red disabled
              True: All red enabled
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0013:
        description: |-
          Police key
          The controller is forced to dark mode or yellow flash.
          The "police key" is a external control switch present in some controllers that manually switches the controller to either dark mode or yellow flash.
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "0,1"
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: integer_as_string_list
            values:
              0: disabled
              1: dark mode
              2: yellow flash
              3: all red
      S0014:
        description: |-
          Current time plan.
          The current time plan (signal program) used in the controller. There may be 1-255 predefined time plans.
          The time plan (signal program) may change signal timings, cycle time, control strategy and much more. Typical usage is is scenario based control where change of program is used to change priority etc.
        from_version: 1.0.2
        arguments:
          status:
            type: integer_as_string
            description: Current time plan
            min: 1
            max: 255
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0015:
        description: |-
          Current traffic situation.
          The current traffic situation used in the controller.
          Used for area-based control where the M0003 command can be sent to a master traffic light controller about which predefined traffic situation to use (1-255).
          Traffic situation is a concept used to divide multiple TLC's into areas and sub-areas. The traffic situation gives the possibility to change the TLC sub-area dynamically depending on the time of day and the traffic flow. Depending on the traffic situation each TLC selects the time plan dynamically.
        from_version: 1.0.2
        arguments:
          status:
            type: integer_as_string
            description: Current traffic situation
            min: 1
            max: 255
          source:
            type: string_list_as_string
            description: Source of the status change
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0016:
        description: |-
          Number of detector logics.
          Can be used by the management system to check the number of detector logics configured in the controller.
        from_version: 1.0.2
        arguments:
          number:
            type: integer_as_string
            description: Number of detector logics
            min: 1
            max: 65025
      S0017:
        description: |-
          Number of signal groups.
          Can be used for the management system to check the number of signal groups configured in the controller.
        from_version: 1.0.2
        arguments:
          number:
            type: integer_as_string
            description: Number of signal groups
            min: 1
            max: 65025
      S0019:
        description: |-
          Number of traffic situations.
          Can be used for the management system to check the number of traffic situations configured in the controller.
        from_version: 1.0.2
        arguments:
          number:
            type: integer_as_string
            description: Number of traffic situations
            min: 1
            max: 65025
      S0020:
        description: |-
          Control mode.
          Can be used for the management system to check the current control mode (startup, normal, standby, failure, test).
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. "1,2" and "startup,control"
        from_version: 1.0.2
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          controlmode:
            type: string_list_as_string
            values:
              startup: The controller starts up, performs a power on self test and performs each :term:`start-up interval`
              control: Normal 3-light control
              standby: The controller is in dark or yellow flash mode (either according to programming or manually set)
              failure: The controller has a “major fault” defined according to 3.8 i EN12675. The controller is in dark or yellow flash mode
              test: Mode used for various tests, e.g. signal lights
      S0021:
        description: |-
          Manually set detector logic.
          Provides status of detector logic (1-255) regarding if they are either forced to true or false.
          Can be used to connect RSMP compatible detection equipment to the traffic light controller. Can also be used for prioritization.
        from_version: 1.0.3
        arguments:
          detectorlogics:
            type: string
            description: |-
              Manually set detector logic as text field.
              Each character represent the state in consecutive order,
              where the leftmost character starts with detector logic 1.
              0 : Detector logic not manually set
              1 : Detector logic manually set
              - : Detector logic is undefined/does not exist
            pattern: "^[01]*$"
      S0022:
        description: |-
          List of time plans.
          Provides a list of the configured time plans which is possible to use. This status was added due to status S0018 only provided the total number of time plans and not which were possible to use with M0002.
          Can be used for the management system to check the number of time plans configured in the controller.
        from_version: 1.0.13
        arguments:
          status:
            type: integer_list_as_string
            description: Comma separated list of configured time plans. E.g. "1,2,3,5"
      S0023:
        description: |-
          Dynamic bands.
          Provides a list of all defined dynamic bands. Dynamic bands moves start of signal groups in the cycle and changes the signal timings.
          A typical usage of dynamic bands is scenario based control where changing of signal timings is used for optimal traffic flow.
        from_version: 1.0.13
        arguments:
          status:
            type: string
            description: |-
              Dynamic bands.
              Each dynamic band are written as pp-dd-ee where:
              pp=Time plan
              dd=Dynamic band number (from 1-10)
              ee=Extension in seconds in this band
              
              Each dynamic band is separated with a comma.
              
              E.g.
              pp-dd-ee,pp-dd-ee
            pattern: "(^$)|(^(?<item>(\\d{1,2})\\-\\d{1,2}-\\d{1,2})(,\\g<item>)*$)"
      S0024:
        description: |-
          Offset time.
          Offset time is used to define an offset between intersections in coordinated control. It is based on the expected travel time between intersections.
          Can be used by the management system to check to fine tune the coordination for optimal traffic flow.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Offset table
              Each offset time is written as p-t where:
              p=time plan number (from 1 to 255)
              t=offset time in seconds (from 0 to 255)
              
              Each offset time is separated with a comma
              
              E.g.
              1-0,2-13-3-7
            pattern: "^(\\d{1,3}\\-\\d{1,3})(?:,(\\d{1,3}\\-\\d{1,3}))*$"
      S0026:
        description: |-
          Week time table.
          Week time table for signal programs (time plan) to use for each day during a week.
          The week time table determine which predefined signal timings (time plan) to use during the week for optimal traffic flow.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Week time table. Defines time table to use for each week day
              Each day is written as d-t where:
              d=day of week
              t=time table nr
              
              Day of week legend:
              0=Monday
              1=Tuesday
              2=Wednesday
              3=Thursday
              4=Friday
              5=Saturday
              6=Sunday
              
              Each segment is separated with a comma
              E.g.
              d-t,d-t
      S0027:
        description: |-
          Time tables.
          Time of day for when to switch signal program (time plan).
          The signal timings (time plan) to use during time of day for optimal traffic flow.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Time Table. Defines time tables.
              Each time definition is written as t-o-h-m where:
              t=time table nr (1-12)
              o=function
              h=hour - switching time
              m=minute - switching minute
              
              Function legend:
              0=no plan is selected by time table
              1=set plan 1
              …
              16= set plan 16
              
              hour and minute is using local time (not UTC)
              
              Each time definition is separated with a comma
              
              E.g.
              t-o-h-m,t-o-h-m
      S0028:
        description: |-
          Cycle time.
          Cycle time (or cycle length) is the sum of all phases in a time plan (traffic program). This time is fixed when using fixed time control or coordination (except "local coordination"). When the cycle counter reaches this length it is reset back to zero.
          Changing the cycle time can be used as part of scenario based control.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Cycle time table
              Each cycle time is written as pp-tt where:
              pp=time plan
              tt=cycle time in seconds
              
              Each cycle time is separated with a comma
              
              E.g.
              pp-tt,pp-tt
      S0029:
        description: |-
          Forced input status.
          Provide status of input (1-255) regarding if they are forced or not. Can be used for all types of input where the traffic light controller must react to external control.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        from_version: 1.0.13
        arguments:
          status:
            type: string
            description: |-
              Forced input status as text field.
              Each character represent the state in consecutive order,
              where the leftmost character starts with input 1.
              0 : Input not forced
              1 : Input forced
              - : Input undefined/does not exist
      S0030:
        description: |-
          Forced output status.
          Provide status of output (1-255) regarding if they are forced or not. Can be used for all types of output where the traffic light controller needs to control other equipment.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
        from_version: 1.0.15
        arguments:
          status:
            type: string
            description: |-
              Forced output status as text field.
              Each character represent the state in consecutive order,
              where the leftmost character starts with output 1.
              0 : Output not forced
              1 : Output forced
              - : Output undefined/does not exist
      S0031:
        description: |-
          Trigger level sensitivity for loop detector.
          The trigger level sensitivity determines at what level the loop detector should trigger. If it set too low then then traffic will not be detected as intended. If it is set too high the detector might give false positives.
          Can be used to make sure that the detectors detect traffic as intended.
        from_version: 1.0.15
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Loop detector trigger level sensitivity is written as dd-ss where:
              dd=loop detector number
              ss=sensitivity value
              Each loop detector is separated with a comma. E.g.dd-ss,dd-ss.
      S0032:
        description: |-
          Coordinated control
          This status is used when coordination between traffic light controllers is active. Coordination is described in detail in the corresponding section
          Please note that all values in this status uses comma-separated lists - one value for each intersection, e.g. “1,2” and “centralized,off”
        from_version: 1.1.0
        arguments:
          intersection:
            type: integer_as_string_list
            description: |-
              Comma separated list of intersections which the status relates to, e.g. “1,2”.
              Use “0” for all intersections of the TLC.
            min: 0
            max: 255
          status:
            type: string_list_as_string
            values:
              local: Local coordination
              centralized: Coordination with synchronized clock
              'off': Coordination not active
          source:
            description: Source of the status change
            type: string_list_as_string
            values:
              operator_panel: Operator panel
              calendar_clock: Calendar/clock
              control_block: Control block
              forced: Forced due to external command e.g. supervisor
              startup: Set after startup mode
              other: Other reason
      S0033:
        description: |-
          Signal Priority Status
          This status can be used to get updates about priority requests. For example, you can use it to know when priority requests are activated or cancelled.
          A list of priorities is returned, referred to by their request ids. The same request id can appear only once.
          All priorities are included in the list (not only the ones that have changed state since the last update). This is done regardless of whether the status is send in respond to a status request, or due to a status subscription, and also regardless of whether a status subscription uses an update interval, or send-on-change, or both.
          If you subscribe using an update interval, you’re not guaranteed to get all intermediate states. To guarantee that, send-on-change must be used when subscribing.
          To understand how this status relates to ETSI/J2735, please see the [wiki](https://github.com/rsmp-nordic/rsmp_sxl_traffic_lights/wiki/Signal-priority-and-ETSI-J2735).
          All priorities are send on every status update, regardless of whether an interval, or sendOnChange (or both) is used.
          When a priority reaches an end states (completed, timeout, rejected, cooldown or stale), it must be sent once on the next status update, then removed from the list.
          A request always starts in the ‘received’ state. The following table shows the possible state transitions:

          State      | Possible next states
          ---------- | -------------------------------------
          received   | queued, activated, rejected, cooldown
          queued     | activated, timeout
          activated  | completed, stale
          completed  |
          timeout    |
          rejected   |
          cooldown   |
          stale      |
        from_version: 1.1.0
        arguments:
          status:
            description: JSON array of priority status items
            type: array
            items:
              r:
                type: string
                description: ID of the priority request
              t:
                type: timestamp
                description: Timestamp, indicating when the priority last changed state.
              s:
                type: string
                description: |-
                  Current status of the priority request
                values:
                  received: A new priority request was received but has not yet been processed
                  queued: The priority request has been queued for later activation
                  activated: The priority was activated
                  completed: The priority was cancelled as expected
                  timeout: The priority has been queued for too long
                  rejected: The priority request cannot be granted
                  cooldown: A similar priority request means the priority request cannot be activated now
                  stale: The priority has been active too long without cancellation, and was therefore removed
              e:
                type: integer_as_string
                description: |-
                  Estimated green extension provided by the priority, in seconds
                  Only used when state is ‘completed’.
                optional: true
                min: 0
                max: 255
              d:
                type: integer_as_string
                description: |-
                  Estimated red reduction provided by the priority, in seconds
                  Only used when state is ‘completed’.
                optional: true
                min: 0
                max: 255
      S0034:
        description: |-
          Timeout for dynamic bands.
          Time until a designated time plan is entered due to lost connection with the supervisor.
          Disabled if set to '0'.
          Used in conjunction with dynamic bands, M0014
        from_version: 1.1.0
        arguments:
          status:
            type: integer_as_string
            description: Timeout, in minutes
            min: 0
            max: 65535
      S0035:
        description: |-
          Emergency route.
          The status is active during emergency prioritization.
          Used in situations where full priority is given in the emergency vehicle program
          or for other types of priority in some cases.

          This status is similar to S0006, but supports multiple routes
        from_version: 1.2.0
        arguments:
          emergencyroutes:
            description: Active emergency routes
            type: array
            items:
              id:
                type: integer_as_string
                description: ID of active emergency route
                min: 1
                max: 255
      S0091:
        description: |-
          Operator logged in/out OP-panel.
          Provides information if maintenance personnel is currently working on site.
        from_version: 1.0.1
        arguments:
          user:
            type: integer_as_string
            values:
              0: Nobody logged in
              1: Operator logged in at level 1 (read only)
              2: Operator logged in at level 2 (read/write)
      S0092:
        description: |-
          Operator logged in/out web-interface.
          Provides information if maintenance personnel is currently working with the controller.
        from_version: 1.0.1
        arguments:
          user:
            type: integer_as_string
            values:
              0: Nobody logged in
              1: Operator logged in at level 1 (read only)
              2: Operator logged in at level 2 (read/write)
      S0095:
        description: |-
          Version of Traffic Light Controller.
          Provides diagnostic version information.
        from_version: 1.0.1
        arguments:
          status:
            type: string
            description: Manufacturer, product name and version of traffic light controller
      S0096:
        description: |-
          Current date and time.
          Note: UTC is used.
          Provides diagnostic information about the current date and time set in the controller.
        from_version: 1.0.1
        arguments:
          year:
            type: integer_as_string
            description: Year
            min: 0
            max: 9999
          month:
            type: integer_as_string
            description: Month
            min: 1
            max: 12
          day:
            type: integer_as_string
            description: Day of month
            min: 1
            max: 31
          hour:
            type: integer_as_string
            description: Hour
            min: 0
            max: 23
          minute:
            type: integer_as_string
            description: Minute
            min: 0
            max: 59
          second:
            type: integer_as_string
            description: Second
            min: 0
            max: 59
      S0097:
        description: |-
          Checksum of traffic parameters.
          Can be used to check if any traffic parameter has been changed.
          For instance, depending on controller, maintenance personnel can modify traffic parameters on site to optimize traffic flow. This status provides the ability to monitor if any traffic parameter has been changed. The traffic parameters may be downloaded with S0098.
        from_version: 1.0.15
        arguments:
          checksum:
            type: string
            description: |-
              Checksum of the traffic parameters
              Uses SHA-2 as hashing algorithm
              Includes
              - all signal programs, including program versions
              - signal group settings
              - time plans
              - safety matrix
              - intergreen times
              - detector settings
              
              It should NOT include:
              - network settings
              - log files
              - software
              - other device settings that are not part of the signal program
              
              Note:
              - The checksum should be calculated using the same data as used in S0098
              - Data Downloaded with S0098 and hashed with SHA-2 should match this value.
          timestamp:
            type: timestamp
            description: Time stamp of the checksum
      S0098:
        description: |-
          Configuration of traffic parameters.
          Can be used to download all traffic parameters from the controller.
          For instance, depending on controller, maintenance personnel can modify traffic parameters on site to optimize traffic flow. This status provides the ability to downloaded them.
        from_version: 1.0.15
        arguments:
          config:
            type: base64
            description: |-
              Traffic parameters.
              Includes
              - all signal programs, including program versions
              - signal group settings
              - time plans
              - safety matrix
              - intergreen times
              - detector setting
              
              It should NOT include:
              - network settings
              - log files
              - software
              - other device settings that are not part of the signal program
              
              Note:
              - There is no way to upload this binary file to the TLC using RSMP
              - The format of the binary file is not specified and is not expected to be compatible between suppliers
          timestamp:
            type: timestamp
            description: Time stamp of the config
          version:
            type: string_list_as_string
            description: |-
              Version information of the configuration. Contains basic information such as controller id, changes to config and other information.
              The format is not specified in detail.
      S0205:
        description: |-
          Traffic Counting: Number of vehicles.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        from_version: 1.0.14
        arguments:
          start:
            type: timestamp
            description: Time stamp for start of measuring
          vehicles:
            type: integer_as_string_list
            description: |-
              Number of vehicles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
      S0206:
        description: |-
          Traffic Counting: Vehicle speed
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        from_version: 1.0.14
        arguments:
          start:
            type: timestamp
            description: Time stamp for start of measuring
          speed:
            type: integer_as_string_list
            description: |-
              Average speed in km/h (integer).
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
      S0207:
        description: |-
          Traffic Counting: Occupancy.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        from_version: 1.0.14
        arguments:
          start:
            type: timestamp
            description: Time stamp for start of measuring
          occupancy:
            type: integer_as_string_list
            description: |-
              Occupancy in percent (%) (0-100)
              - Value expressed as an integer with a range of 0-100.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 100
      S0208:
        description: |-
          Traffic Counting: Number of vehicles of given classification.
          This status was introduced to improve performance in case traffic counting is done on all all detectors.
        from_version: 1.0.14
        arguments:
          start:
            type: timestamp
            description: Time stamp for start of measuring
          P:
            type: integer_as_string_list
            description: |-
              Number of cars.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          PS:
            type: integer_as_string_list
            description: |-
              Number of cars with trailers.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          L:
            type: integer_as_string_list
            description: |-
              Number of trucks.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          LS:
            type: integer_as_string_list
            description: |-
              Number of trucks with trailers.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          B:
            type: integer_as_string_list
            description: |-
              Number of buses.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          SP:
            type: integer_as_string_list
            description: |-
              Number of trams.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          MC:
            type: integer_as_string_list
            description: |-
              Number of motor cycles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          C:
            type: integer_as_string_list
            description: |-
              Number of bicycles.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
          F:
            type: integer_as_string_list
            description: |-
              Number of pedestrians.
              - Value expressed as an integer with a range of 0-65535.
              - Contains data from all detector logics. Each detector logic is separated with a comma.
              - The value is set to “-1” if no data could be measured (e.g. detector fault)
            min: -1
            max: 65535
    commands:
      M0001:
        description: |-
          Sets functional position.
          Sets the controller to yellow flash, dark mode or normal control.
          Requires security code 2.
        from_version: 1.0.1
        arguments:
          status:
            type: string
            description: Set operating mode
            values:
              NormalControl: Normal Control
              YellowFlash: Enables yellow flash
              Dark: Enables dark mode
          securityCode:
            type: string
            description: Security code 2
          timeout:
            type: integer_as_string
            description: |-
              Time in minutes until controller automatically reverts to previous functional position.
              0=no automatic return
            min: 0
            max: 1440
          intersection:
            type: integer_as_string
            description: |-
              Intersection number.
              Command only applies to specified intersection. Other intersections remains in their respective operating mode(s).
              0: All intersections
            min: 0
            max: 255
        command: setValue
      M0002:
        description: |-
          Sets current time plan.
          Change of traffic program of the traffic light controller.
          Typical usages is scenario based control where change of program is used to change signal timings etc.
          This command changes the signal timings for optimal traffic flow.
          Requires security code 2
        from_version: 1.0.1
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Controller uses time plan according to programming
              True: Controller uses time plan according to command
          securityCode:
            type: string
            description: Security code 2
          timeplan:
            type: integer_as_string
            description: designation of time plan
            min: 1
            max: 255
        command: setPlan
      M0003:
        description: |-
          Sets traffic situation the controller uses.
          Used for area-based control where this command can be sent to a master traffic light controller about which predefined traffic situation to use (1-255).
          Traffic situation is a concept used to divide multiple TLC's into areas and sub-areas. The traffic situation gives the possibility to change the TLC sub-area dynamically depending on the time of day and the traffic flow. Depending on the traffic situation each TLC selects the time plan dynamically.
          Requires security code 2
        from_version: 1.0.1
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Controller uses traffic situation according to own programming
              True: Controller uses traffic situation according to command
          securityCode:
            type: string
            description: Security code 2
          traficsituation:
            type: integer_as_string
            description: designation of traficsituation
            min: 1
            max: 255
        command: setTrafficSituation
      M0004:
        description: |-
          Restarts Traffic Light Controller.
          Used in the event of serious faults in the device where a restart is considered to be able to remedy a problem.
          Requires security code 2
        from_version: 1.0.1
        arguments:
          status:
            type: boolean_as_string
            deprecated: true
            description: 'True: Restart controller'
          securityCode:
            type: string
            deprecated: true
            description: Security code 2
        command: setRestart
      M0005:
        description: |-
          Activate emergency route.
          The function is made for emergency prioritization. Works in the same way as the M0006 and M0008 where the traffic light controller responds to an input.
          Should be used in situations where full priority is given in the emergency vehicle program.
          Requires security code 2.
        from_version: 1.0.1
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Deactivate emergency route
              True: Activate emergency route
          securityCode:
            type: string
            description: Security code 2
          emergencyroute:
            type: integer_as_string
            description: Number of emergency route
            min: 1
            max: 255
        command: setEmergency
      M0006:
        description: |-
          Activate input.
          Set given input (1-255) of the controllers general purpose I/O to either true or false.
          The function can provide an input to the traffic light controller on which a predefined action can be taken.
          Can be used for all types of input where the traffic light controller must react to external control.
          Typical usages are bus priority, coordination between traffic controllers, external control systems, and much more.
          Requires security code 2.
        from_version: 1.0.1
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Deactivate input
              True: Activate input
          securityCode:
            type: string
            description: Security code 2
          input:
            type: integer_as_string
            description: Number of Input
            min: 1
            max: 255
        command: setInput
      M0007:
        description: |-
          Activate fixed time control.
          Deactivates the traffic actuated control using detectors and activates pre-timed control.
          Can be used in case normal detectors can't be used, e.g. during maintenance work.
          Requires security code 2.
        from_version: 1.0.2
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Deactivate fixed time control
              True: Activate fixed time control
          securityCode:
            type: string
            description: Security code 2
        command: setFixedTime
      M0012:
        description: |-
          Request start or stop of a series of signal groups.
          Starts or stops several signal groups.
          This command was introduced due to coordination requirements needing to set many signal groups to green and red at the same time and M0010 and M0012 being to slow to send a message for each signal group individually.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers.
          Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          May also include purposes for adaptive control where a UTC system or a local traffic light controller takes over the phase control (stage control).
          Requires security code 2.
        from_version: 1.0.8
        reserved: true
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Orders signal groups to green or red. Sets a block of 16 signal groups at a time. Can be repeated to set several blocks of 16 signal groups. Values are separated with comma. Blocks are separated with semicolon. Since semicolon breaks the SXL csv-format, colon is used in example below.
              
              1=Order signal group to green
              0=Order signal group to red
              
              Format: [Offset],[Bits to set],[Bits to unset]:…
              
              Offset sets where the 16 inputs starts from followed by two 16 bit values telling which bit to set and unset in binary format, i.e. first bit have value 1 and last bit have value 32768.
              
              Example 1:
              "5, 4134, 65" sets input 6,7,10,17 = on and 5,11 = off
              (Input starts from no. 5 and bit 1,2,5,12 = 1 and bit 0,6 = 0)
              
              Example 2:
              "22, 1, 4" sets input 22 = on and 24 = off
              (Input starts from no. 22 and bit 0 = 1 and bit 2 = 0)
              
              And both these examples could be sent in the same message as:
              "5,4143,65:22,1,4"
              
              Such a message would order signal group 6,7,10,17,22 to green and signal group 5,11,24 to red
          securityCode:
            type: string
            description: Security code 2
        command: setStart
      M0013:
        description: |-
          Activate a series of inputs

          Set given inputs (1-255) of the controllers general purpose I/O to either true or false. This command was introduced due to coordination requirements needing to set many inputs to true/false at the same time and M0006 being to slow to send a message for each input individually. With this command many inputs can be set to true/false at the same time using a single command message. It can be used for all types of input where the traffic light controller must react to external control. Typical usages are bus priority, coordination between traffic controllers, external control systems, and much more.

          Requires security code 2.

          The parameter ‘status’ sets/unsets a block of 16 inputs at a time. It can be repeated to set several blocks of 16 inputs. Values are separated with comma. Blocks are separated with semicolon. Format: [Offset];[Bits to set];[Bits to unset];…

          - ‘Offset’ defines where the 16 inputs starts from
          - ‘Bits to set’ defines which bit(s) to set. ‘0’ if unused
          - ‘Bits to unset’ defines which bit(s) to unset. ‘0’ if unused

          Example 1:
          “3,4134,65” sets input 4,5,8,15 and unsets 3,9
          - Input starts from no. 5
          - “4134” is 1 0000 0010 0110 in binary, but since input starts from 3, it is shifted 3 bits, e.g. 1000 0001 0011 0000 which are bits 4,5,8,15
          - “65” is 100 0001 in binary, but since input starts from 3, it is shifted 3 bits, e.g. 10 0000 1000 which are bits 3,9

          Example 2:
          “12,1,4” sets input 12 and unsets 14
          - Input starts from no. 12
          - “1” is 1 in binary, but since input starts at 12 it is shifted 12 bits, e.g. 1 0000 0000 0000, which is bit 12
          - “4” is 100 in binary, but since input starts at 12 it is shifted 12 bits, e.g. 100 0000 0000 0000, which is bit 14

          And both these examples could be sent in the same message as: “3,4143,65;12,1,4”

          Such a message would set input 4,5,8,12,15 and unset input 3,9,14

          Example 3:
          “0,1,2” sets input 0 and unsets 1
          - Input starts from 0
          - “1” is 1 in binary, which is bit 0
          - “2” is 10 in binary, which is bit 1
        from_version: 1.0.8
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Sets/Unsets a block of 16 inputs at a time. Can be repeated to set several blocks of 16 inputs. Values are separated with comma. Blocks are separated with semicolon.
              Format: [Offset];[Bits to set];[Bits to unset];…
          securityCode:
            type: string
            description: Security code 2
        command: setInput
      M0014:
        description: |-
          Set dynamic bands.
          Can be used to change between predefined signal timings. Moves the start of signal groups in the cycle.
          This command can be used to change the split of green time during the cycle. A typical usage is scenario based control where changing of signal timings is used for optimal traffic flow.
          Requires security code 2
        from_version: 1.0.13
        arguments:
          plan:
            type: integer_as_string
            description: Plan to be changed
            min: 0
            max: 255
          status:
            type: string_list_as_string
            description: |-
              Dynamic bands.
              Each dynamic band are written as dd-ee where:
              dd=Dynamic band number (from 1-10)
              ee=Extension in seconds in this band
              
              Each dynamic band is separated with a comma.
              
              E.g.
              dd-ee,dd-ee
          securityCode:
            type: string
            description: Security code 2
        command: setCommands
      M0015:
        description: |-
          Set Offset time.
          Offset time is used to define an offset between intersections in coordinated control. It is based on the expected travel time between intersections.
          This command can be used to fine tune the coordination for optimal traffic flow.
          Requires security code 2.
        from_version: 1.0.13
        arguments:
          status:
            type: integer_as_string
            description: Set offset time in seconds
            min: 0
            max: 255
          plan:
            type: integer_as_string
            description: Time plan nr
            min: 0
            max: 255
          securityCode:
            type: string
            description: Security code 2
        command: setOffset
      M0016:
        description: |-
          Set week time table.
          Set which time table for signal programs to use for each day during a week.
          This command changes the signal timings during the week for optimal traffic flow.
          Requires security code 2.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Week time table. Defines time table to use for each week day
              Each segment is written as d-t where:
              d=day of week
              t=time table nr
              
              Day of week legend:
              0=Monday
              1=Tuesday
              2=Wednesday
              3=Thursday
              4=Friday
              5=Saturday
              6=Sunday
              
              Each segment is separated with a comma
              
              E.g.
              d-t,d-t
          securityCode:
            type: string
            description: Security code 2
        command: setWeekTable
      M0017:
        description: |-
          Set time tables.
          Set time of day for when to automatically switch signal program (time plan).
          This command changes the signal timings according to time of day for optimal traffic flow.
          Requires security code 2.
        from_version: 1.0.13
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Time Table. Defines time tables.
              Each time definition is written as t-o-h-m where:
              t=time table nr (1-12)
              o=function
              h=hour - switching time
              m=minute - switching minute
              
              Function legend:
              0=no plan is selected by time table
              1=set plan 1
              …
              16= set plan 16
              
              hour and minute is using local time (not UTC)
              
              Each time definition is separated with a comma.
              
              E.g.
              t-o-h-m,t-o-h-m
          securityCode:
            type: string
            description: Security code 2
        command: setTimeTable
      M0018:
        description: |-
          Set Cycle time.
          Cycle time (or cycle length) is the sum of all phases in a time plan (traffic program). This time is fixed when using fixed time control or coordination (except "local coordination"). When the cycle counter reaches this length it is reset back to zero.
          This command provides the ability to change the cycle time when using coordinated or fixed time control. It changes the timings for optimal traffic flow. Can be used with scenario based control.
          Requires security code 2.
        from_version: 1.0.13
        arguments:
          status:
            type: integer_as_string
            description: Set cycle time in seconds
            min: 1
            max: 255
          plan:
            type: integer_as_string
            description: Time plan nr
            min: 0
            max: 255
          securityCode:
            type: string
            description: Security code 2
        command: setCycleTime
      M0019:
        description: |-
          Force input.
          Force a given input (1-255) of the controllers general purpose I/O to either True or False. Can be used for all types of input where the traffic light controller must react to external control.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
          Requires security code 2.
        from_version: 1.0.13
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Release input
              True: Force input
          securityCode:
            type: string
            description: Security code 2
          input:
            type: integer_as_string
            description: Number of Input
            min: 1
            max: 255
          inputValue:
            type: boolean_as_string
            description: |-
              False: input forced to False
              True: input forced to True
        command: setInput
      M0020:
        description: |-
          Force output.
          Force a given output (1-255) of the controllers general purpose I/O to either True of False. Can be used for all types of output where the traffic light controller needs to control other equipment.
          Can be used for bus priority, coordination between traffic controllers, external control systems, and much more.
          When the output is released (status=False), the outputValue is ignored.
          Requires security code 2.
        from_version: 1.0.15
        arguments:
          status:
            type: boolean_as_string
            description: |-
              True: Force output
              False: Release output
          securityCode:
            type: string
            description: Security code 2
          output:
            type: integer_as_string
            description: Number of Output
            min: 1
            max: 255
          outputValue:
            type: boolean_as_string
            description: |-
              False: output forced off
              True: output forced on
        command: setOutput
      M0021:
        description: |-
          Set trigger level sensitivity for loop detector.
          The trigger level sensitivity determines at what level a loop detector should trigger. If it set too low then then traffic will not be detected as intended. If it is set too high the detector might give false positives.
          This command provides the ability to fine tune loop detectors to make sure they detect traffic as intended.
          Requires security code 2
        from_version: 1.0.15
        arguments:
          status:
            type: string_list_as_string
            description: |-
              Loop detector trigger level sensitivity is written as dd-ss where:
              dd=loop detector number
              ss=sensitivity value
          securityCode:
            type: string
            description: Security code 2
        command: setLevel
      M0022:
        description: |-
          Request Signal Priority

          Useful for bus priority or other type of priorities like emergency vehicles or groups of cyclists.

          The benefit of using this message over activating inputs or detector logics is that you can specify a priority level, vehicle type and estimated time of arrival. You can also update or cancel the request, and use the corresponding status message to track the status of the request, including how much priority was actually given.

          To understand how this command relates to ETSI/J2735, please see the [wiki](https://github.com/rsmp-nordic/rsmp_sxl_traffic_lights/wiki/Signal-priority-and-ETSI-J2735).

          Activating signal priority is expected to provide more green time for a particular movement through the intersection, but the exact mechanism must typically be configured in the controller.

          The movement to prioritize can be referenced in a number of ways, depending on what is configured in the controller, and in the system that sends priority requests. Either:

          - Reference a signal group by setting ‘signalGroupId’. This method is simple, but will not allow you to have different priority mechanism for the same signal group, unless they can be distinguished by the vehicle type. For example, if you need to trigger different priorities depending on whether a bus goes straight or makes a turn for the same signal group, you need to use of the other referencing methods.
          - Reference an input by setting ‘inputId’. This can be useful if you previously used inputs to activate priority. The input will not be activated, only the priority.
          - Reference a connection by setting ‘connectionId’. A connection is a movement from a specific ingoing lane to a specific outgoing lane.
          - Reference an intersection approach by setting ‘approachId’.
          - Reference an ingoing lane by setting ‘laneInId’, and optionally also reference an outgoing lane by setting ‘laneOutId’.

          Referencing attributes that are not used must be left out, rather than set to null or empty strings. This includes:

          - signalGroupId
          - inputId
          - connectionId
          - approachId
          - laneInId
          - laneOutId

          Referencing attributes are only used when initiating a request. When updating or cancelling the request, the request is identified by its requestId, and no referencing attributes are allowed.

          You initiate a priority request with type set to ‘new’. You must provide a request id that uniquely identifies the request on the controller. It can be a randomly generated UUID (universally unique identifier), or it can be constructed by combining e.g. a vehicle id and some other identifier. When updating or cancelling a request, you must pass the same request id again.

          Providing ETA (estimated time of arrival) when initiating a request is optional, but can help the controller plan ahead in cases where you’re able to send the request before the vehicle arrives at the intersection. You’re allowed to initiate the request without an ETA and provide it in a later request update. But providing the ETA when initiating the request is recommended, since it will give the controller more time to plan ahead.

          Like ETA, providing a vehicle type is optional, but can help the controller decide how to best handle the request.

          The priority level provides a way to indicate the relative importance of the request compared to other requests. For example, emergency vehicles or delayed buses could be given a higher priority level.

          If the ETA changes before the priority is cancelled, or you want to change the priority level, you can send another request message with type set to ‘update’. The vehicle type cannot be changed.

          When you send a priority request, it will be processed to decide if it’s possible to activate the requested priority.

          If the request is accepted, the priority can either be activated immediately, or if another priority is currently active, it can be queued for later activation.

          If the priority cannot be accepted the request is rejected. Cooldown is a specific type of rejection, which means that s similar request has just completed, and some time needs to pass before a similar request can be activated.

          When a request is queued, it is expected to become activated later, but in case too long passes without activation, the controller is expected to time out the request.

          Once a priority is activated, you’re excepted to cancel it as soon as there’s no need for it anymore, typically when the vehicle has passed the intersection. You cancel a request by sending a request passing the existing request id setting the type to ‘cancel’.

          If a request is never cancelled, the controller is expected to remove the priority at some point, but until then the priority might block requests in other direction which is why you should always cancel a priority when it’s not needed anymore.
        from_version: 1.1.0
        arguments:
          requestId:
            type: string
            description: A string that uniquely identifies the request on the controller
          signalGroupId:
            type: string
            optional: true
            description: ID of a signal group component.
          inputId:
            type: integer_as_string
            optional: true
            description: ID of an input, using the same numbering scheme as M0006
            min: 0
            max: 255
          connectionId:
            type: integer_as_string
            optional: true
            description: ID of a connection, connecting an ingoing and an outgoing lane
            min: 0
            max: 255
          approachId:
            type: integer_as_string
            optional: true
            description: ID of an intersection approach
            min: 0
            max: 16
          laneInId:
            type: integer_as_string
            optional: true
            description: ID of an ingoing lane
            min: 0
            max: 255
          laneOutId:
            type: integer_as_string
            optional: true
            description: ID of an outgoing lane
            min: 0
            max: 255
          priorityId:
            type: integer_as_string
            optional: true
            description: ID of a priority
            min: 0
            max: 255
          type:
            type: string
            values:
              new: New priority request
              update: Update to existing priority request
              cancel: Cancel an existing priority
          level:
            type: integer_as_string
            description: |-
              0: Lowest, 14: Highest
            min: 0
            max: 14
          eta:
            type: integer_as_string
            optional: true
            description: Estimated time of arrival to the intersection, in seconds
            min: 0
            max: 255
          vehicleType:
            type: string
            optional: true
            description: Vehicle type
            values:
              pedestrian: Pedestrians
              bicycle: Bicycles
              motorcycle: Motorcycles
              car: Passenger vehicle
              bus: Bus used for public transport
              lightTruck: Light truck
              heavyTruck: Heavy truck
              tram: Trams used for Public transport
              emergency: Police, fire or ambulance
              safetyCar: For e.g. escort vehicles
              specialTransport: For e.g. heavy load
              other: Other type of vehicle
        command: requestPriority
      M0023:
        description: |-
          Set timeout for dynamic bands
          Switch to a designated time plan if this timeout is reached due to lost connection with the supervisor.
          Disable by setting timeout to '0'.
          Used in conjunction with dynamic bands, M0014
          Requires security code 2.
        from_version: 1.1.0
        arguments:
          status:
            type: integer_as_string
            min: 0
            max: 65535
            description: Timeout, in minutes
          securityCode:
            type: string
            description: Security code 2
        command: setTimeout
      M0103:
        description: |-
          Set security code.
          Change the security code to use when sending commands
          Security codes are used as an extra layer of security in many commands. They need to match between the supervision system and the traffic light controller in order for the commands to be executed.
        from_version: 1.0.1
        arguments:
          status:
            type: string
            values:
              Level1: Change security code 1
              Level2: Change security code 2
          oldSecurityCode:
            type: string
            description: Previous security code
          newSecurityCode:
            type: string
            description: New security code
        command: setSecurityCode
      M0104:
        description: |-
          Set clock.
          Can be used to manually set the clock of the traffic light controller if automatic  time synchronization (NTP or watchdog sync) is not available. For instance, during maintenance work.
          Note: UTC is used.
          Requires security code 1
        from_version: 1.0.1
        arguments:
          securityCode:
            type: string
            description: Security code 1
          year:
            type: integer_as_string
            description: Year
            min: 0
            max: 9999
          month:
            type: integer_as_string
            description: Month
            min: 1
            max: 12
          day:
            type: integer_as_string
            description: Day of month
            min: 1
            max: 31
          hour:
            type: integer_as_string
            description: Hour
            min: 0
            max: 23
          minute:
            type: integer_as_string
            description: Minute
            min: 0
            max: 59
          second:
            type: integer_as_string
            description: Second
            min: 0
            max: 59
        command: setDate
  Signal group:
    description:
    alarms:
      A0008:
        description: |-
          Dead lock error.
          Used for dead lock errors.
          For instance; a signal group has requested green but is unable to switch due to a conflicting signal group for an extended period of time. At some point the request times out and the controller goes failure mode. The cause for this error is due to configuration errors or external sources.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.0.1
        arguments:
          timeplan:
            type: integer_as_string
            description: Current time plan
            min: 1
            max: 255
      A0101:
        description: |-
          Pushbutton error.
          Used for push buttons.
        priority: 3
        category: D
        from_version: 1.0.0
      A0201:
        description: |-
          Serious lamp error.
          Used for lamp errors.
          Is a "major fault" defined according to 3.8 in EN12675 which causes the controller to switch to a "failure mode" according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.0.0
        arguments:
          color:
            type: string
            description: Color of lamp
            values:
              red: red
              yellow: yellow
              green: green
      A0202:
        description: |-
          Less serious lamp error.
          Used for lamp errors.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.0
        arguments:
          color:
            type: string
            description: Color of lamp
            values:
              red: red
              yellow: yellow
              green: green
    statuses:
      S0025:
        description: |-
          Time-of-Green / Time-of-Red.
          Provides predicted signal timings of green and red for each signal group. Max, min and likely time to green and red.
        from_version: 1.0.13
        arguments:
          minToGEstimate:
            type: timestamp
            description: |-
              Time stamp for the minimum time for the signal group to go to green. If the signal group is green, it is the minimum time for the next green.
          maxToGEstimate:
            type: timestamp
            description: |-
              Time stamp for the maximum time for the signal group to go to green. If the signal group is green, it is the maximum time for the next green.
          likelyToGEstimate:
            type: timestamp
            description: |-
              Time stamp for the most likely time for the signal group to go to green. If the signal group is green, it is the most likely time for the next green.
          ToGConfidence:
            type: integer_as_string
            description: Confidence of the likelyToGEstimate. 0-100%
            min: 0
            max: 100
          minToREstimate:
            type: timestamp
            description: |-
              Time stamp for the minimum time for the signal group to go to red. If the signal group is red, it is the minimum time for the next red.
          maxToREstimate:
            type: timestamp
            description: |-
              Time stamp for the maximum time for the signal group to go to red. If the signal group is red, it is the maximum time for the next red.
          likelyToREstimate:
            type: timestamp
            description: |-
              Time stamp for the most likely time for the signal group to go to red. If the signal group is red, it is the most likely time for the next red.
          ToRConfidence:
            type: integer_as_string
            description: Confidence of the likelyToREstimate. 0-100%
            min: 0
            max: 100
    commands:
      M0010:
        description: |-
          Start of signal group. Orders a signal group to green.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers. Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          Requires security code 2
        from_version: 1.0.8
        reserved: true
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: No command (default)
              True: Order a signal group to green
          securityCode:
            type: string
            description: Security code 2
        command: setStart
      M0011:
        description: |-
          Stop of signal group. Orders a signal group to red.
          Although this command is intended to be used with coordination it is not actually specified to be used for this yet. It is reserved in the SXL for possible future use.
          Intended for use with coordination of signaling systems where a traffic light controller communicates with neighboring controllers. Only used when a primary controller orders signal group of other controller to green or red (Coordination with external control bits).
          Requires security code 2
        from_version: 1.0.8
        reserved: true
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: No command (default)
              True: Order a signal group to red
          securityCode:
            type: string
            description: Security code 2
        command: setStop
  Detector logic:
    description:
    alarms:
      A0301:
        description: |-
          Detector error (hardware).
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.2
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values: ['on','off'] # on/off must be quoted, otherwise they are converted to true/false
          manual:
            type: boolean_as_string
            description: Manually controlled detector logic (True/False)
      A0302:
        description: |-
          Detector error (logic error).
          For instance; detector continuously on or off during an extended time.
          Is a "minor fault" defined according to 3.11 in EN12675.
        priority: 3
        category: D
        from_version: 1.0.2
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values: ['on','off'] # on/off must be quoted, otherwise they are converted to true/false
          manual:
            type: boolean_as_string
            description: Manually controlled detector logic (True/False)
          logicerror:
            type: string
            description: Type of logic error
            values:
              always_off: no detection during predefined max time
              always_on: detection constantly on during predefined max time
              intermittent: intermittent logic fault (flutter)
      A0303:
        description: |-
          Serious detector error (hardware).
          Is a “major fault” defined according to 3.8 i EN12675 which causes the controller to switch to a “failure mode” according to 3.6 in EN12675.
        priority: 2
        category: D
        from_version: 1.1.0
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values: ['on','off'] # on/off must be quoted, otherwise they are converted to true/false
          manual:
            type: boolean_as_string
            description: Manually controlled detector logic (True/False)
      A0304:
        description: |-
          Serious detector error (logic error).
          For instance; detector continuously on or off during an extended time.
          Is a “major fault” defined according to 3.8 i EN12675 which causes the controller to switch to a “failure mode” according to 3.6 in EN12675
        priority: 2
        category: D
        from_version: 1.1.0
        arguments:
          detector:
            type: string
            description: Designation of the detector (hardware)
          type:
            type: string
            description: Type of detector.
            values:
              loop: Inductive detector loop
              input: External input
          errormode:
            type: string
            description: Detector forced on/off while detector error
            values: ['on','off'] # on/off must be quoted, otherwise they are converted to true/false
          manual:
            type: boolean_as_string
            description: Manually controlled detector logic (True/False)
          logicerror:
            type: string
            description: Type of logic error
            values:
              always_off: no detection during predefined max time
              always_on: detection constantly on during predefined max time
              intermittent: intermittent logic fault (flutter)
    statuses:
      S0201:
        description: |-
          Traffic Counting: Number of vehicles.
          Used for Traffic counting.
        from_version: 1.0.5
        arguments:
          starttime:
            type: timestamp
            description: Time stamp for start of measuring
          vehicles:
            type: integer_as_string
            description: Number of vehicles on a given detector logic (since last
              update)
            min: 0
            max: 65535
      S0202:
        description: |-
          Traffic Counting: Vehicle speed.
          Used for Traffic counting.
        from_version: 1.0.5
        arguments:
          starttime:
            type: timestamp
            description: Time stamp for start of measuring
          speed:
            type: integer_as_string
            description: Average speed in km/h
            min: 0
            max: 65535
      S0203:
        description: |-
          Traffic Counting: Occupancy.
          Used for Traffic counting.
        from_version: 1.0.5
        arguments:
          starttime:
            type: timestamp
            description: Time stamp for start of measuring
          occupancy:
            type: integer_as_string
            description: Occupancy in percent (0-100%)
            min: 0
            max: 100
      S0204:
        description: |-
          Traffic Counting: Number of vehicles of given classification.
          Used for Traffic counting.
        from_version: 1.0.5
        arguments:
          starttime:
            type: timestamp
            description: Time stamp for start of measuring
          P:
            type: integer_as_string
            description: Number of cars
            min: 0
            max: 65535
          PS:
            type: integer_as_string
            description: Number of cars with trailers
            min: 0
            max: 65535
          L:
            type: integer_as_string
            description: Number of trucks
            min: 0
            max: 65535
          LS:
            type: integer_as_string
            description: Number of trucks with trailers
            min: 0
            max: 65535
          B:
            type: integer_as_string
            description: Number of buses
            min: 0
            max: 65535
          SP:
            type: integer_as_string
            description: Number of trams
            min: 0
            max: 65535
          MC:
            type: integer_as_string
            description: Number of motor cycles
            min: 0
            max: 65535
          C:
            type: integer_as_string
            description: Number of bicycles
            min: 0
            max: 65535
          F:
            type: integer_as_string
            description: Number of pedestrians
            min: 0
            max: 65535
    commands:
      M0008:
        description: |-
          Force detector logic.
          Force a given detector logic (1-255) to either true or false.
 
          When 'status' is true the detector logic is forced to the state specified in 'mode'.
          While forced, no other source can activate or deactivate the detector logic.
          When forcing, the 'duration' can be set to automatically release the
          detector logic after a specific time interval.
          
          When 'status' is false the detector logic is released and the state
          will again be controlled by other sources, e.g. hardware.
          Note that this means that releasing does not guarantee a return to the previous state.
          This is because the other control sources might have changed state while
          the detector logic was forced.
          When releasing, the 'mode' and 'duration' attributes are ignored.
          
          Can also be for signal group prioritization if the controller is programmed
          to activate priority based on detector logic actication.

          Requires security code 2
        from_version: 1.0.3
        arguments:
          status:
            type: boolean_as_string
            description: |-
              False: Release detector logic, 'mode' is ignored.
              True: Force detector logic to the value in 'mode'.
          duration:
            type: integer
            description: |-
              If set, automatically release after this number of
              milliseconds. Ignored if 'status' is false.
              Setting to zero is the same as leaving out, and means
              no automatic release will happen.
          securityCode:
            type: string
            description: Security code 2
          mode:
            type: boolean_as_string
            description: |-
              Mode to force to (ignored if 'status' is false).
              False: Deactivate detector logic
              True: Activate detector logic
        command: setForceDetectorLogic
