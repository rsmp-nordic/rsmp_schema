{
  "message_id": {
    "description" : "Message Id",
    "type": "string",
    "$comment" : "Example: 1.2.3 or 1.2",
    "pattern": "^[a-fA-F0-9]{8}-[a-fA-F0-9]{4}-4[a-fA-F0-9]{3}-[89abAB][a-fA-F0-9]{3}-[a-fA-F0-9]{12}$"
  },
  "timestamp" : {
    "description" : "Timestamp",
    "type": "string",
    "$comment" : "Example: 2015-06-08T11:49:03.293Z",
    "pattern": "^[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}\\.[0-9]{3}Z$"
  },
  "integer" : {
    "description" : "Integer as string",
    "type": "string",
    "$comment" : "Example: 123 or -123",
    "pattern": "^\\-?[0-9]+$"
  },
  "number_as_string" : {
    "description" : "Number as string",
    "type": "string",
    "$comment" : "Example: 123, -123, 0.5, -2.4",
    "pattern": "^\\-?[0-9]+(\\.[0-9]+)?$"
  },
  "version": {
    "description" : "Version",
    "type": "string",
    "$comment" : "Example: 1.2.3 or 1.2",
    "pattern" : "^[0-9]{1,2}\\.[0-9]{1,2}(\\.[0-9]{1,2})?"
  },
  "command_code": {
    "description" : "Command code id",
    "type" : "string",
    "pattern" : "^M"
  },
  "status_code": {
    "description" : "Status code id",
    "type" : "string",
    "pattern" : "^S"
  },
  "alarm_code": {
    "description" : "Alarm code id",
    "type" : "string",
    "pattern" : "^A"
  },
  "component_id": {
    "description" : "Component id - supports both format A (AA+BBCDD=EEEFFGGG) and format B (/component/path)",
    "anyOf": [
      {
        "$comment": "Format A: Traditional component id like KK+AG0503=001DL001",
        "type": "string",
        "pattern": "^[A-Za-z0-9]+\\+[A-Za-z0-9]+=.+$"
      },
      {
        "$comment": "Format B: Hierarchical component id like /sg/1 or /dl/radar/1",
        "type": "string",
        "pattern": "^(/[^/]+)+$",
        "not": {
          "pattern": "/$"
        }
      },
      {
        "$comment": "Empty string refers to main component",
        "type": "string",
        "enum": [""]
      },
      {
        "$comment": "Null refers to main component",
        "type": "null"
      }
    ]
  },
  "boolean": {
    "description" : "Boolean as string",
    "type" : "string",
    "enum" : [ "True", "False" ]
  },
  "integer_list": {
    "description" : "Comma-separated list of integers as strings",
    "type" : "string",
    "pattern" : "^(\\-?\\d+)(?:,(\\-?\\d+))*$"
  },
  "boolean_list": {
    "description" : "Comma-separated list of booleans as strings",
    "type" : "string",
    "pattern" : "^(True|False)(?:,(True|False))*$"
  },
  "string_list": {
    "description" : "Comma-separated list of strings",
    "type" : "string"
  }
}